#!/bin/bash
SCRIPT="${0##*/}"

## Defaults
: "${EXOSCALE_ZONE:=ch-gva-2}"
: "${KUBECTL:=kubectl}"

## Usage
__USAGE() {
  cat >&2 <<EOF
USAGE: ${SCRIPT} <scope> <item(s)> [-- [<kubectl/exo arguments> ...]]

SYNOPSIS:
  Query and display various tests-relevant troubleshooting data.

SCOPES/ITEMS:

  k8s
    nodes, csrs, pods, services, events

  exo (cli)
    [sks_]cluster[s], [sks_]nodepool[s], instancepool[s], instance[s],
    loadbalancer[s] (nlb[s]), service, securitygroup[s] (sg[s]),
    antiaffinitygroup[s] (aag[s])

EOF
}
if [ $# -lt 2 ]; then
  __USAGE
  exit 1
fi

# Arguments
MY_format=
MY_scope=
MY_item=
while [ -n "${1}" ]; do
  case "${1}" in
    'help'|'--help'|'-h')
      __USAGE; exit 1;;
    '-j'|'--json')
      MY_format='json';;
    --)
      shift; break;;
    -*)
      echo "ERROR[${SCRIPT}]: Invalid option (${1})" >&2 && exit 1;;
    *)
      if [ -z "${MY_scope}" ]; then
        MY_scope="${1}"
      elif [ -z "${MY_item}" ]; then
        MY_item="${1}"
      else
        echo "ERROR[${SCRIPT}]: Invalid argument (${1})" >&2 && exit 1
      fi
      ;;
  esac
  shift
done


## Main
case "${MY_scope}" in

  'k8s')
    case "${MY_item}" in
      'nodes')
        if [ "${MY_format}" == 'json' ]; then
          ${KUBECTL} -o json get nodes "${@}" \
            | jq '.items[]|.metadata.name, (.status.conditions[]|select(.type=="Ready")).status, .metadata.labels, .status.addresses'
        else
          ${KUBECTL} -o wide get nodes "${@}" \
            | grep -E '^(NAME|test-ccm)'
        fi
      ;;
      'csrs')
        if [ "${MY_format}" == 'json' ]; then
          ${KUBECTL} -o json get csr "${@}" \
            | jq '.items[]|select(.spec.username|test("test-ccm"))|.metadata.name, .spec.username, (.status.conditions[]?|select(.type=="Approved")).status'
        else
          ${KUBECTL} -o wide get csr "${@}" \
            | grep -E '(^NAME|test-ccm)'
        fi
        ;;
      'pods')
        if [ "${MY_format}" == 'json' ]; then
          ${KUBECTL} -o json get pods "${@}" \
            | jq '.items[]|select(.spec.nodeName|test("^test-ccm"))'
        else
          ${KUBECTL} -o wide get pods "${@}" \
            | grep -E '(^NAME|test-ccm)'
        fi
        ;;
      'services')
        if [ "${MY_format}" == 'json' ]; then
          ${KUBECTL} -o json get services "${@}" \
            | jq '.items[]|select(.spec.type=="LoadBalancer")|.metadata.namespace+":"+.metadata.name, .spec.ports, .status'
        else
          ${KUBECTL} -o wide get services "${@}" \
            | grep -E '(^NAME|LoadBalancer)'
        fi
      ;;
      'events')
        if [ "${MY_format}" == 'json' ]; then
          ${KUBECTL} -o json get events "${@}" \
            | jq
        else
          kubectl \
            --output='custom-columns=FirstSeen:.firstTimestamp,LastSeen:.lastTimestamp,Count:.count,From:.source.component,Type:.type,Namespace:.metadata.namespace,Object:.metadata.name,Reason:.reason,Message:.message' \
            --sort-by='.lastTimestamp' \
            get events "${@}"
        fi
      ;;
      *)
        echo "ERROR[${SCRIPT}]: Invalid item (${MY_item})" >&2 && exit 1;;
    esac
    ;;

  'exo'|'cli')
    case "${MY_item}" in
      'sks_clusters'|'clusters')
        if [ "${MY_format}" == 'json' ]; then
          exo -O json -z "${EXOSCALE_ZONE}" compute sks list \
            | jq '.[]|select(.name|test("^test-ccm"))'
        else
          exo -O table -z "${EXOSCALE_ZONE}" compute sks list
        fi
        ;;
      'sks_cluster'|'cluster')
        if [ "${MY_format}" == 'json' ]; then
          exo -O json -z "${EXOSCALE_ZONE}" compute sks show "${@}" \
            | jq
        else
          exo -O table -z "${EXOSCALE_ZONE}" compute sks show "${@}"
        fi
        ;;
      'sks_nodepools'|'nodepools')
        if [ "${MY_format}" == 'json' ]; then
          exo -O json -z "${EXOSCALE_ZONE}" compute sks nodepool list \
            | jq '.[]|select(.name|test("^test-ccm"))'
        else
          exo -O table -z "${EXOSCALE_ZONE}" compute sks nodepool list
        fi
        ;;
      'sks_nodepool'|'nodepool')
        if [ "${MY_format}" == 'json' ]; then
          exo -O json -z "${EXOSCALE_ZONE}" compute sks nodepool show "${@}" \
            | jq
        else
          exo -O table -z "${EXOSCALE_ZONE}" compute sks nodepool show "${@}"
        fi
        ;;
      'instancepools')
        if [ "${MY_format}" == 'json' ]; then
          exo -O json -z "${EXOSCALE_ZONE}" compute instance-pool list \
            | jq '.[]|select(.name|test("^nodepool-test-ccm"))'
        else
          exo -O table -z "${EXOSCALE_ZONE}" compute instance-pool list
        fi
        ;;
      'instancepool')
        if [ "${MY_format}" == 'json' ]; then
          exo -O json -z "${EXOSCALE_ZONE}" compute instance-pool show "${@}" \
            | jq
        else
          exo -O table -z "${EXOSCALE_ZONE}" compute instance-pool show "${@}"
        fi
        ;;
      'instances')
        if [ "${MY_format}" == 'json' ]; then
          exo -O json -z "${EXOSCALE_ZONE}" compute instance list \
            | jq '.[]|select(.name|test("^test-ccm"))'
        else
          exo -O table -z "${EXOSCALE_ZONE}" compute instance list
        fi
        ;;
      'instance')
        if [ "${MY_format}" == 'json' ]; then
          exo -O json -z "${EXOSCALE_ZONE}" compute instance show "${@}" \
            | jq '.[]|select(.name|test("^test-ccm"))'
        else
          exo -O table -z "${EXOSCALE_ZONE}" compute instance show "${@}"
        fi
        ;;
      'loadbalancers'|'nlbs')
        if [ "${MY_format}" == 'json' ]; then
          exo -O json -z "${EXOSCALE_ZONE}" compute load-balancer list \
            | jq '.[]|select(.name|test("^(test-ccm|k8s)"))'
        else
          exo -O table -z "${EXOSCALE_ZONE}" compute load-balancer list
        fi
        ;;
      'loadbalancer'|'nlb')
        if [ "${MY_format}" == 'json' ]; then
          exo -O json -z "${EXOSCALE_ZONE}" compute load-balancer show "${@}" \
            | jq
        else
          exo -O table -z "${EXOSCALE_ZONE}" compute load-balancer show "${@}"
        fi
        ;;
      'service')
        if [ "${MY_format}" == 'json' ]; then
          exo -O json -z "${EXOSCALE_ZONE}" compute load-balancer service show "${@}" \
            | jq
        else
          exo -O table -z "${EXOSCALE_ZONE}" compute load-balancer service show "${@}"
        fi
        ;;
      'securitygroups'|'sgs')
        if [ "${MY_format}" == 'json' ]; then
          exo -O json compute security-group list "${@}" \
            | jq
        else
          exo -O table compute security-group list "${@}"
        fi
        ;;
      'securitygroup'|'sg')
        if [ "${MY_format}" == 'json' ]; then
          exo -O json compute security-group show "${@}" \
            | jq
        else
          exo -O table compute security-group show "${@}"
        fi
        ;;
      'antiaffinitygroups'|'aags')
        if [ "${MY_format}" == 'json' ]; then
          exo -O json compute anti-affinity-group list "${@}" \
            | jq
        else
          exo -O table compute anti-affinity-group list "${@}"
        fi
        ;;
      'antiaffinitygroup'|'aag')
        if [ "${MY_format}" == 'json' ]; then
          exo -O json compute anti-affinity-group show "${@}" \
            | jq
        else
          exo -O table compute anti-affinity-group show "${@}"
        fi
        ;;
      *)
        echo "ERROR[${SCRIPT}]: Invalid item (${MY_item})" >&2 && exit 1;;
    esac
    ;;

  *)
    echo "ERROR[${SCRIPT}]: Invalid scope (${MY_scope})" >&2 && exit 1;;

esac
